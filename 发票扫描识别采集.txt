



发票七要素:
发票代码、发票号码、开票日期、购货单位纳税人识别号、销货单位纳税人识别号、开票金额、开票税额


在国税总局的增值税防伪税控系统汉字防伪项目试运行以后，增值税专用发票将同时存在二维码、84位字符和108位字符三种密文形式[5]，这三种形式的发票格式除套印的密文内容不相同外，版式完全相同


票原性缺陷和扫描仪机原性缺陷
◆发票套印失败而致字符压线、打印针错针或虚针、印章压字、印泥油渍水渍浸染、压痕复写、不均匀复写、局部破损或变形、人工信息如圆珠笔迹、因潮因热变形变色
◆扫描仪机原性缺陷，包括发票的纸张倾斜、走纸不均匀、纸片碎屑与灰尘、撮纸压痕、图像曝光缺陷


支持集中/分布式部署

图像放大、缩小、旋转，裁剪。
重扫、补扫、新增扫等扫描功能

图片高压缩比:通过软件压缩处理，能够在清晰度规定范围内将A4纸张大小铺满票据的图像压缩在200K以内





----OCR--------OCR--------OCR--------OCR--------OCR--------OCR--------OCR--------OCR--------OCR--------OCR--------OCR----

OCR（Optical Character Recognition，光学字符识别）是指电子设备（例如扫描仪或数码相机）检查纸上打印的字符，通过检测暗、亮的模式确定其形状，然后用字符识别方法将形状翻译成计算机文字的过程；即，针对印刷体字符，采用光学的方式将纸质文档中的文字转换成为黑白点阵的图像文件，并通过识别软件将图像中的文字转换成文本格式，供文字处理软件进一步编辑加工的技术。


国内市场上提供商用OCR技术的厂家众多，主要以清华文通和汉王科技占主导地位
清华文通及汉王科技的OCR  产品均可以识别数字、英文、中文等印刷体字符，同时也具备对文档格式及表格内容的识别能力
这些产品不能直接满足企业按自身业务进行定制的识别方案，并且不能对识别结果给出正确或错误的客观评价，所以在本项目中对这些商用技术只选作印刷体字符的识别引擎来使用。

Tesseract-OCR 最初是由惠普实验室于 1984  年开始开发的一项专利技术因惠普公司经营策略调整而把该技术于 2005  年贡献给开源社区，以Apache2.0  协议开源发布，2006 年得到Google 赞助而进一步快速发展成为具有重要影响力的开源OCR  项目[24]。。Tesseract  具备机器学习能力，能够针对指定字体的有限字符集进行训练从而扩展其识别能力，而且存在逐步改进的能力
在本项目中把Tesseract 作为辅助识别引擎来使用

E-OCR发票扫描识别管理系统

译图OCR发票识别


针对不同票据类型自动识别扫描参数，进行分类管理。

不仅对增值税专用发票的准确识别，而且还应发票图像的类型识别和与业务相适应的其它业务信息的识别或处理


影像优化，倾斜矫正，版面分析，OCR识别，直接从票据影像中提取重要信息

模板匹配、版面分析、区域截取、页面纠编、字体加粗、去黑边、去杂点等，优化发票影像的质量，通过OCR识别，将需要的发票信息自动获取
根据不同类型的发票定义模板，提供个性化的区域信息识别，支持增值税发票、运输类增值税发票、成本发票、红字发票、清单等
对扫描图片自动进行色彩平衡、去毛边、去杂点、纠偏、去折纹、文字连接、二值化、滤红章等专业化图像优化处理


----扫描仪--------扫描仪--------扫描仪--------扫描仪--------扫描仪--------扫描仪--------扫描仪--------扫描仪--------扫描仪--------扫描仪--------扫描仪----
可以把商业文档扫描仪分为
自动馈纸式扫描仪、平面翻盖式扫描仪、手持式扫描仪、文档拍摄仪

当前的各种纸质文档扫描仪提供的程序接口主要支持两类技术规范ISIS[20](ISO14984)、TWAIN[21]。
◆ISIS（Image and Scanner Interface Specification）:是1990年由Pixel Translations公司开发并受专利保护的技术规范，现为EMC公司持有。
基于ISIS 规范编写的应用程序是通过提供ISIS模块然后以类似管道的方式和既有模块连接在一起工作的，每个ISIS模块提供独特的图像相关功能，模块之间通过一套特殊的数据标签存储系统进行交互

◆TWAIN:是由一群技术爱好者于1992年发起的开放性技术规范，由非盈利性组织TWAIN工作组维护，并以宽松的许可方式免费开源发布。

这个项目应使用TWAIN实现扫描仪控制






dpi:分辨率单位,每英寸点数
μ:灰值图像亮度，或者统计样本平均值
σ:灰值图像对比度，或者统计样本标准差
σ2:统计样本方差
I:灰值图像
R:实数域
C:复数域
R2:二维实平面
E:单位矩阵
U:谱分解中的本征矩阵或者奇异值分解中的左奇异矩阵
V:奇异值分解中的右奇异矩阵
λ:谱分解中的谱对角阵
∑:奇异值分解中的奇异对角阵
R:Radon变换


----二值化--------二值化--------二值化--------二值化--------二值化--------二值化--------二值化--------二值化--------二值化--------二值化--------二值化----
二值图像是位深度只有1位的灰值图像，每个像素的取值非0即1，故称为二值图像。
严格意义上的黑白图像因每个像素点非黑即白，所以是二值图像。将一幅非二值图像转换成为二值图像的过程称为图像的二值化

图像二值化的过程通常是逐像素或者逐区域地把图像的各部分指定成背景或者前景的过程
图像的二值化不存在统一的操作方法，就单个的案例而言也难以对结果的好坏进行全自动的衡量。 

图像二值化方法分为直方图分析、聚类、熵、对象属性相似度、空间相关性、邻域自适应六类

在本项目使用以下二值化方法
◆聚类二值化:大津算法 
	大津算法：是基于聚类的二值化方法中的经典方法，由大津展之于1979 年提出。该算法以寻求一个阈值，使得通过它分割的前景和背景两个类的类间方差达最大值。对清晰图像分割得很好；对轻微缺陷的图像处理表现不稳定
	Kittler算法：Kittler和Illingworth于1986年指出大津法中当前景和背景的概率比较接近时会失效，并提出一种属于聚类二值化方法的最小误差法[7]。将二值化的最佳阈值问题转化成了最小误差化高
斯分布的拟合问题。Kittler算法对于整体阈值的把握比大津算法更加恰当，并且具有很好的抗污损和抗噪声干扰能力。但是 Kittler算法对细节的处理不如大津算法准确，对表格线的处理还可以接受，对汉字的字迹处理得十分模糊不清。


◆邻域自适应二值化:比聚类二值化方法更加细致。邻域自适应方法观察到图像的不同区域明暗程度可能会存在差异，如果使用一个全局的阈值，在不同区域将会产生不同的结果，这时如果通过每个像素点邻域内的环境计算出相应的阈值，则比较符合这个像素点的局部图像特征，能够比较好地分割前景和背景

在发票票面上存在大片的空白区域，这些空白区域分布着大量的噪声，当计算空白区域中像素点的邻域阈值时，因为这些噪声的干扰而错误地把背景当成了前景。
--在邻域内寻找一个较高的像素值作分辨前景的最大值，通过这个值来划分出前景和可能被错误识别的背景
----使用Kittler算法得到整体的全局阈值，再基于这个阈值设计一个前景上限，然后在阈值上限以下充分地发挥邻域自适应方法对细节的分辨能力

Kittler算法在细节处比大津算法差，对整体明暗分界的把握却比大津算法更好
	Niblack算法:
	Sauvola算法:对于严重污损了的文档的图像比Niblack算法表现更好
	White算法:出于一种简单的考虑，当一个像素点明显暗于邻域的亮度时就认为它属于前景
可以认为经过改进的Sauvola算法与经过改进的Niblack算法在获得增值税发票图像的二值化图像上是一样的好

使用汉字字符的实际尺寸（以3毫米计）作为邻域窗口的尺寸，具体使用时根据图像的分辨率再折算成点数，取成奇数

因为White算法的隐藏特性比较明显，很容易打断原本连续的表格线从而不利于表格线的检测，在增值税发票处理项目中并不适合使用改进的White算法


----彩色分割--------彩色分割--------彩色分割--------彩色分割--------彩色分割--------彩色分割--------彩色分割--------彩色分割--------彩色分割--------彩色分割----

在数字图像处理中常用的色彩模型有RGB模型、 HSV模型、 YCbCr模型等
◆RGB模型:由代表“红”、“绿”、“蓝”  三种原色光的分量构成的立方体色彩模型
◆HSV模型:是对RGB模型中的彩色光在圆柱坐标中表达的一种方式，其中的H表示“色调”，S表示“饱和度”，V表示“光强度”
	--色调:在色相环中对一种纯色光进行索引的索引值，色相环是从原色光“红”色开始沿着“红”→“绿”→“蓝”→“红”的方向排列成一个圆周的彩色索引带，所以色调的取值是圆周上的角度
	--饱和度:表示的是彩色光的纯度，饱和度越高对应的彩色光纯度越好，而低的饱和度对应的彩色光中参杂的白光成分就越多

◆YCbCr模型:是一种有利于对RGB 模型进行压缩编码的模型，在彩色图像压缩中具有高效的表现，对彩色信息具有良好的分析能力
	--Y值表达的是彩色光的光通量，Cb值表达的是蓝色彩色成分的强度，Cr值表达的是红色彩色成分的强度，Cb和Cr值都可以为正值和负值

用来分析增值税发票彩色图像的彩色属性时不加标明地默认使用BT.709版YCbCr模型

以增值税专用发票抵扣联为例，
票面表格及版式是用标准绿色油墨印制，呈亮绿色；
发票信息是通过针式票据打印机打印在第一联后通过蓝色复印油墨压印出来的，呈亮蓝色；
一张发票只有在留有税务监制章和发票专用章两枚红色印鉴之后才能有效，
于是抵扣联上的主要信息由红、绿、蓝三种不同的颜色构成


结合使用二值化方法把背景像素屏蔽而只使用前景对象的像素点进行色差分布统计


由于发票票样的背景是由接近白光的像素构成，所以背景在Cb-Cr色差平面的密度分布中绝大部分处在离中心点（白光点）不远的范围内，而枝状突起部分则主要由构成前景的像素统计出来的

由于发票的彩色图像中各信息的颜色属性相对比较稳定，使用YCbCr色彩模型来分析发票的彩色图像时，Cb-Cr色差平面上的像素密度分布在形状上呈现出星状分枝
通过对这种星状分枝的形状进行几何分解，把分解后得到的每一部件逆向映射到原彩色图像从而得到对应的原图像的相应彩色部件，由此完成对原图的彩色分割


----表格检测--------表格检测--------表格检测--------表格检测--------表格检测--------表格检测--------表格检测--------表格检测--------表格检测--------表格检测----


表格线段检测:改进型有向单连通链方法
线段检测算法直接影响到表格特征的提取
线段检测算法是一类同时标出两个端点的直线检测算法
基于Hough变换的线段检测方法一般是先使用差分滤镜提取出边缘，然后使用Hough变换来统计可能的直线参数方程，最后从直线方程中筛选出线段
基于链码跟踪的线段检测方法一般是先得到二值图像，然后提取目标物体的轮廓，从轮廓的链码串集合中提取直线
常见的线段检测方法还有基于近邻编码的方法、矢量化算法

考虑到矢量化算法的大量成功应用以及表格线的水平和垂直方向的明显特征，针对表格线检测应用中对“有向单连通链”算法做了适当改进

游程:在二值图像中定义游程为横向或者纵向的连续的黑色像素条，其两端要么是图像边界要么是白色像素，用(d, s, l) 三元组表示
d:方向(纵/横)
s:起始位置(x,y)
l:起始到结束的长度（像素点个数）

横向连通的纵向游程构成横向单连通链，纵向连通的横向游程构成纵向单连通链


使用有向单连通链来检测表格线的过程可以分为：游程扫描、游程过滤、有向单连通链生长、有向单连通链过滤、有向单连通链合并

由于扫描仪机原性缺陷，在 游程扫描之前 使用一些平滑的算法
使用粗糙填补空隙的方法来对游程进行平滑处理，另外常见的一些方法是使用形态学的方法对图像进行开、闭运算，试图来弥补断裂的直线
由于票原性缺陷，平滑会产生新的误差，在发票识别场景，平滑处理是多余的操作，不宜使用


◆游程过滤
基于表格线检测，断言孤立游程、超长游程、歧路游程是表格线检测的干扰因素，需在有向单连通链生长前过滤
孤立的游程独自构成有向单连通链，但对表格线检测没有提供有价值的信息，需过滤
在检测表格线时可把所有长度在1毫米及以上的游程都当作超长游程，并滤掉
当发票图像的分辨率为 300dpi 时，1毫米长度换算成像素为12d, 即当游程长度大于12个像素时应作为超长游程过滤
歧路游程, 需过滤
超长游程同时又是歧路游程, 需过滤


◆链的轴估计
--有向单连通链估算直线段:
----用其内部每个游程的中心点以不加权的方式按最小二乘法拟合出直线L, 然后用末端游程所在的纵线或横线将直线L截成线段, 称截成的线段为有向单连通链的轴线段，简称轴

--如果有向单连通链太短，以它的轴来拟合一条直线段是没有意义的，至少可以舍弃含游程个数少于3个的有向单连通链


◆链的过滤
因为表格中的每一个单元格至少都应能容纳一个以上的字符，所以任何一段表格线的长度都应大于一个字符的宽或高。
据目测发票上表格内承载有效业务信息的文字字号为五号或小五号，宽和高约为3.7<4毫米，为了排除字符信息的干扰，可以过滤掉长度小于4毫米的有向单连通链


发票上的有向单连通链可以分成两类
A类有向单连通链的数量最多，占据了统计图中长度小于30的一个三角形区域，在长和宽都小于2处达到了峰值
B类有向单连通链的长度大于30且在宽度约为4左右处呈现一个小峰值
所要检测的表格线条蕴含在B类有向单连通链中，构成A类的主体内容是字符信息。为检测表格线，可把A类有向单连通链过滤掉

针对发票图像中的表格线，在过滤掉长度过短的A类和中轴均方差过大的C类有向单连通链之后，对剩下的有向单连通链按轴倾角分类，
对于横向单连通链只取其轴倾角小于30度的，而对于纵向单连通链则只取其轴倾角大于120度的


◆链的分拆
分离被噪声污染的表格线


在发票图像处理中，可使用一个字符的宽度作为最短可分拆的连通链分量的长度


◆链的合并
在经过链的分拆和过滤之后，尽量把属于同一根表格线的多个有向单连通链合并。合并后的一组有向单连通链虽然不一定连通，但通过共同拟合得到的轴线能更好地符合原表格线

代表相同表格线的两个有向单连通链在合并后的整体游程中心均方差仍然很小，可以使用这一特征作为能否接受合并的判别条件。
使用游程中心标准差小于线宽作为判别条件可以得到很好的结果


◆轴的延展
对有向单连通链在轴的两端进行延展，可以得到完整的表格线。


在基于已经得到的轴进行δ邻域拓展测试时，δ邻域的选择很重要。当δ值过小时，将会使延伸拓展提早结束。当δ值过大时，会将轴拓展到跨过单元格到达另一侧的错误的线条上。
选取半个字符宽度作为适当的δ值可以避免以上两类问题


----表格提取--------表格提取--------表格提取--------表格提取--------表格提取--------表格提取--------表格提取--------表格提取--------表格提取--------表格提取----


增值税专用发票的表格单元格都是由横线和垂直围成的，内部没有任何贯穿的斜线。
计算表格单元格的过程就是从已经检测到的水平和竖线相互交织，拾取出封闭的原子矩形区域的过程

◆单元格的拾取

可以使用字符的宽和高作为有效单元格的最小尺寸限制

以一个交点为起点，沿横线或者竖线按顺时钟方向依次连接下一个相邻的交点，如果连续找到了四个封闭的交点，就确定了一个单元格
以这一方法依次遍历所有交点，就可以找出所有单元格



----发票表格匹配与分类--------发票表格匹配与分类--------发票表格匹配与分类--------发票表格匹配与分类--------发票表格匹配与分类----

◆基于图密度的算法:直接在图像的原始灰值级上进行操作
◆基于特征的算法:首先从图像中提取出特征，比如角点、边缘、斑点等，然后再运用一些算法对这些特征进行匹配

基于特征的算法:分为局部特征匹配算法和全局特征匹配算法
◆局部特征匹配算法:以提取图像中的点特征、边缘特征、线段特征、曲面特征等特征
◆全局特征匹配算法:从图的宏观结构入手，以提取图的多边形、图像结构等信息作为特征

选用特征匹配算法来对商业表格进行匹配和识别

◆Scott 算法:基于“匹配的元素之间距离最近”以及“最佳匹配只有一个”，以矩阵谱分析的方法实现，缺点是当图像出现了大角度的旋转(倾斜)时，将无法得到正确的匹配
◆Shapiro算法:是一种形状模型，优势在于模型中已经对原特征点集进行了抽象，不受原始点集的旋转、缩放、对称、以及轻微变形等的影响，相比于Scott算法具有更好的稳定性


在实际的增值税发票图像的匹配实验中发现使用Scott算法得到的结果常常比Shapiro算法得到的结果更好

在具有大量内部相似特征的匹配问题求解中，Shapiro算法容易受到干扰，这种由内部相似性及对称性而导致的这些匹配竞争难以通过单纯的符号纠正过程来妥善解决


通过扫描仪得到的图像可以准确地获得图像的dpi 信息

应用Scott算法对图像的特征集进行快速且精准的匹配
因为发票表格内部各特征点间局部相似性很高，更高级的抽象了形状模型的Shapiro算法表现反而不佳

◆Blondel算法:计算一个有向图G与典型的最简有向图的相似矩阵，典型的最简有向图只包含两个顶点(Hub、Authority)和一条有向边(从Hub 指向Authority)，得出这个有向图中的每个顶点相似于Hub或者相似于Authority的得分


把表格看成是一种有向图，求解有向图之间的相似关系以对齐有向图的顶点和边，从而实现对表格的匹配

完全摒弃表格单元格顶点之间的距离关系，只保留表格的结构特性，从而是与Scott算法和Shapiro算法中以距离或基于距离的形状来求解匹配完全不同的新方法，能够克服基于距离特征描述子的弱点

以使用Blondel算法来匹配有向图顶点的方法来进行匹配，可以克服距离特征的缺点，当使用Scott算法失效时可以用来做一个好的补充


表格匹配的相似度
--相似度计算与赋值矩阵直接相关，在进行相似度计算之前，对赋值矩阵进行错误纠正以排除偏离点的影响非常必要

发票自动分类
--可以使用匹配的相似度来衡量



----发票图像的偏斜纠正--------发票图像的偏斜纠正--------发票图像的偏斜纠正--------发票图像的偏斜纠正--------发票图像的偏斜纠正----

基于表格的纠正
首先，进行表格检测以到基准图像的表格线，并得到表格的外边框。
然后把外边框摆正，以让水平边呈0度、垂直边呈90度摆放，于是可以得到一个纠正基准图像的仿射变换。
把这个纠正变换应用到基准图像，就可以把基准图像进行纠正，并得到纠正后的基准图像。
如果扫描得到的基准图像的质量不十分理想，那么使用投影变换就可以得到外边框完全摆正的纠正图像

文本图像的纠正
由汉字构成的文本段落具备整齐平直的显著特点，利用这一特点可以十分方便地检测到一行行的汉字文本，同时可以检测到文本的段落篇章。
使用Radon变换可以准确地得到各文本行基线的位置和段落的左右边界

在获得一幅文本图像的文本基线方向之后，施加相应的旋转就可以对这幅文本图像进行偏转纠正



倾斜发票的校正，字符定位和切分的基准是发票外框左上角点 和 发票外框右上角点，根据这两个点的坐标判断是否发生倾斜及倾斜角度
#define IMAGE_HEIGHT	256
#define IMAGE_WIDTH		256

/// 定位参考点:表示增值税发票抵扣联图像中外框左上角点的坐标
#define LT_REF_X		1
#define LT_REF_Y		1

///	定位参考点:表示增值税发票抵扣联图像中外框右上角点的坐标
#define RT_REF_X		2
#define RT_REF_Y		2

///	位图信息头结构变量，含有图像头结构信息
typedef struct _PicInfoHeader
{
	int biHeight;
	int biWidth;
	///	...
}PicInfoHeader;


/**
	m_InfoHeader是一个位图信息头结构变量，它含有图像头结构信息

	定位参考点
	(LT_REF_X, LT_REF_Y)
	(LR_REF_X, LR_REF_Y)
*/

void RotatePic(PicInfoHeader &m_InfoHeader, BYTE ImageData[IMAGE_HEIGHT][IMAGE_WIDTH])
{
	int i = 0, j = 0;
	int sourceX = 0, sourceY = 0;
	BYTE tempImageData[IMAGE_HEIGHT][IMAGE_WIDTH];

	// 备份图像数据
	for(i = 0; i < m_InfoHeader.biHeight; i++)
	{
		for(j = 0; j < m_InfoHeader.biWidth; j++)
		{
			tempImageData[i][j] = ImageData[i][j];
		}
	}

	// 计算旋转角度和变换矩阵中的参量部分(用两个变量表示，省去每次都需要运算)
	double rotateAngle = atan(double((RT_REF_Y - LT_REF_Y) / (RT_REF_X - LT_REF_X)));
	double param1 = LT_REF_X - LT_REF_X * cos(rotateAngle) + LT_REF_Y * sin(rotateAngle);
	double param2 = LT_REF_Y - LT_REF_X * sin(rotateAngle) - LT_REF_Y * cos(rotateAngle);
	// 遍历每个像点，找到变换前点的位置
	for(i = 0; i < m_InfoHeader.biHeight; i++)
	{
		for(j = 0; j < m_InfoHeader.biWidth; j++)
		{
			// 根据上面变换关系式计算(x0, y0)
			sourceX = (int)(i * cos(rotateAngle) - i * sin(rotateAngle) + param1 + 0.5);
			sourceY = (int)(i * cos(rotateAngle) + j * sin(rotateAngle) + param2 + 0.5);

			// 判断变换前的点是否位于图像有效范围内
			if(sourceX >= 0 && sourceX < m_InfoHeader.biWidth && sourceY >= 0 && sourceY < m_InfoHeader.biHeight)
			{
				ImageData[i][j] = tempImageData[sourceY][sourceX];
			}
			else
			{
				// 其他部分用白色填充
				ImageData[i][j] = 255;
			}
		}
	}
}




----发票扫描识别采集系统--------发票扫描识别采集系统--------发票扫描识别采集系统--------发票扫描识别采集系统--------发票扫描识别采集系统----
1 按识别机器的处理能力自动装载待识别的发票进行批量的识别处理

2 按预设的业务规则对发票识别信息进行校验， 综合利用业务数据来判断发票识别的信息是否准确

3 如果经过自动业务规则校验，判断发票识别信息是准确的，则将这些信息导出到供应商发票管理系统；
否则需要扫描用户干预，编辑确认错误项后，再导出到供应商发票管理系统


查询用户、扫描用户、管理用户

客户端按TWAIN协议自动与扫描仪设备进行能力协商，并配置恰当的扫描参数，启动批量扫描操作

Scan.exe负责驱动扫描仪以批量方式获取发票的300dpi或更高分辨率的彩色图像

OCR.exe是服务守候程序，自动完成对批量获取的图像进行发票识别、校验、上传数据等工作而无需人工干预


扫描客户端程序的操作要求高度自动化以减少扫描用户的操作和关注，并能自动从扫描仪工作错误、网络连接错误等异常中恢复当前正在进行的工作，
使扫描用户专注于发票的整理和其它业务工作而不必值守在扫描客户端前。 

识别要素与校验规则
◆发票号码校验：一张发票上的不同区域印制有不同字体的主发票号码和辅发票号码。同时识别主发票号和辅发票号，当两者不相等时标记为不正确
◆开票日期校验
识别出非日期信息时，标记为不正确
识别出非日期信息时，标记为不正确
识别的日期在过去且超过设定的账期时，标记为不正确；
对于相同发票的发票联和抵扣联，如果两联的开票日期不相同时，标记为不正确

◆销货方信息校验
识别销货方税号:当销货方税号在供应商列表中，并且同期有交易活动，标记为正确
如果没能识别出正确的销货方税号，改为识别销货方名称，当销货方名称在供应商列表中，并且同期有交易活动，则取对应的销货方税号并标记为警告
如果以上都失效，把销货方信息标记为不正确

◆购货方信息校验
与销货方信息校验相类似，不过这时使用的不是供应商列表，而是使用集团旗下的工厂列表用作校验的依据

◆价税合计校验
识别小写价税合计、金额、税额，当小写价税合计= 金额+ 税额，取小写价税合计，标记为正确
如果没能识别出小写的金额相关信息，再识别大写价税合计，当小写价税合计=大写价税合计，取小写价税合计，标记为正确
如果还没有识别出正确的金额相关信息，当大写价税合计=金额+税额，取大写价税合计，标记为正确
如果以上都失败，取小写价税合计，标记价税合计及金额相关信息识别不正确。

◆税额校验
如果价税合计不正确，则标记为不正确
如果价税合计识别正确，按税额浮动范围进行校验，设价税合计为S，税率为r，税额为T ，对于一个预先设定的税额浮动范围，如果税额上下浮动超过了σ，则标记为不正确。

如果通过了上述判断，按税率浮动范围进行校验，对于一个预先设定的税率浮动范围，如果税率上下浮动超过了，则标记为不正确。


----扫描客户端--------扫描客户端--------扫描客户端--------扫描客户端--------扫描客户端----
Image处理算法及技术的开源项目
OpenCV2、Eigen3、libTiff、libJpeg
图像纠偏、格式转换、表格检测、发票类型识别与表格格式匹配、图像二值化处理、图像的分割和区域裁剪等

用libTiff 和libJpeg 分别实现TIFF-G4  图像格式和JPEG图像格式[15]的编码和解码

libJpeg 是由非正式组织IJG用C语言开发并以类BSD协议发布的开源目，实现了JPEG标准图像格式的编码和解码，并提供了一系列操作JPEG格式图像的工具

OpenCV是由Intel公司发起的一套收集了图像处理、机器视觉、模式识别等领域众多算法的跨平台开源计算机视觉库，使用了针对处理器做过优化的C语言开发并以BSD协议发布[48]。
使用OpenCV作为基础的图像处理库，大量使用了其中的各项功能及算法，并直接使用OpenCV的图像表示作为内部图像表示

Eigen3是关于线性代数的跨平台C++模板库，以MPL2协议发布。Eigen3提供的程序接口优雅而灵活，并且针对SSE、NEON等计算机指令集做了矢量计算优化[49]。
使用Eigen3作为线性代数计算库，主要用来实现OpenCV之外的其它算法或改进算法以作补充





OCR Service Stub:Axis2/C Client
WSDL、WEBService

OCR:Tesseract OCR、汉王、清华、ABBYY(泰比)

扫描仪控制开源项目
TWAIN2 DSM
https://github.com/twain/twain-dsm

TWAIN2 协议
完成扫描仪参数的自动配置

需要在本地保存一些结构化数据:
--待处理和正在处理的发票批次状态
--发票图像
--发票识别及处理的过程状态
--发票信息
--发票信息的校验结果
--发票信息的上传状态
--处理过程中的异常或错误以及恢复信息等

使用Sqlite3作为嵌入式的本地数据库引擎，把需要存储的结构化数据封装成 C++ 的数据对象，同时提供多线程安全的数据操作



为了提高字符的识别准确率，OCR Module 集成了两款不同厂商提供的商用中英文双语识别引擎和一款开源的识别引擎Tesseract2




----------------------------------------------------------------------------------------------------------------------------------------------------------



Numpy/Scipy/Pandas/Scikit-learn
OpenCV、Torch

能够自行熟悉相对陌生的数据、整理、清洗；

熟悉常用算法，如分类、聚类、回归、关联规则等


精通数据包SKlearn、Weka等类似工具；


算法开发、训练和优化
进行数据建模分析
在产品中集成算法
按照流程进行软件和模型开发、训练、测试和发布工作
建立并持续改善软件和模型开发、训练、测试与发布流程


验证码识别

预处理
字符提取
归一化






















